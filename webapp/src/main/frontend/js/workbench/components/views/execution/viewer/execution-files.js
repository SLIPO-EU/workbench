import * as React from 'react';
import PropTypes from 'prop-types';

import formatFileSize from '../../../../util/file-size';

import {
  Card,
  CardBody,
  Col,
  Row,
} from 'reactstrap';

import {
  FormattedTime
} from 'react-intl';

import {
  Table,
} from '../../../helpers';

import {
  EnumStepFileType,
  ToolIcons,
} from '../../process/designer';

const fileColumns = [{
  Header: 'id',
  accessor: 'id',
  show: false,
}, {
  Header: () => <span><i className='fa fa-map-o' /></span>,
  id: 'map',
  width: 40,
  Cell: props => {
    if (!props.original.tableName) {
      return null;
    }
    if (props.original.showInMap) {
      return (
        <i data-action="remove-from-map" className='fa fa-check-square-o slipo-table-row-action'></i>
      );
    } else {
      return (
        <i data-action="add-to-map" className='fa fa-square-o slipo-table-row-action'></i>
      );
    }
  },
  style: { 'textAlign': 'center' },
}, {
  Header: 'Actions',
  id: 'actions',
  width: 60,
  Cell: props => {
    return (
      <span>
        {
          (
            props.original.type === EnumStepFileType.CONFIGURATION ||
            props.original.type === EnumStepFileType.KPI ||
            props.original.type === EnumStepFileType.QA
          ) &&
          <i data-action="download" className='fa fa-cloud-download slipo-table-row-action p-1'></i>
        }
      </span>
    );
  },
  style: { 'textAlign': 'center' },
}, {
  Header: 'Type',
  accessor: 'type',
  maxWidth: 120,
  Cell: row => {
    switch (row.value) {
      case EnumStepFileType.CONFIGURATION:
        return 'Configuration';
      case EnumStepFileType.INPUT:
        return 'Input';
      case EnumStepFileType.OUTPUT:
        return 'Output';
      case EnumStepFileType.SAMPLE:
        return 'Sample';
      case EnumStepFileType.KPI:
        return 'KPI';
      case EnumStepFileType.QA:
        return 'Q&A';
      default:
        return '-';
    }
  },
  headerStyle: { 'textAlign': 'center' },
  style: { 'textAlign': 'center' },
}, {
  Header: 'Name',
  id: 'name',
  accessor: r => r.fileName,
  headerStyle: { 'textAlign': 'left' },
}, {
  Header: 'Size',
  id: 'size',
  accessor: f => (formatFileSize(f.fileSize)),
  headerStyle: { 'textAlign': 'center' },
  style: { 'textAlign': 'center' },
}];

export default class ExecutionFiles extends React.Component {

  constructor(props) {
    super(props);
  }

  static propTypes = {
    addToMap: PropTypes.func.isRequired,
    files: PropTypes.arrayOf(PropTypes.object).isRequired,
    removeFromMap: PropTypes.func.isRequired,
    selectedFile: PropTypes.number,
    step: PropTypes.object.isRequired,

    // Action creators
    selectFile: PropTypes.func.isRequired,
  };

  /**
   * Resolve step icon class
   *
   * @returns a CSS class
   * @memberof ExecutionStep
   */
  getIconClassName() {
    return (ToolIcons[this.props.step.component] || 'fa fa-cogs') + ' fa-2x pr-2';
  }


  /**
   * Handles row actions
   *
   * @param {any} rowInfo the rowInfo object for the selected row
   * @param {any} e react synthetic event instance
   * @param {any} handleOriginal the table's original event handler
   * @memberof Resources
   */
  handleRowAction(rowInfo, e, handleOriginal) {
    this.props.selectFile(rowInfo.row.id);

    switch (e.target.getAttribute('data-action')) {
      case 'add-to-map':
        this.props.addToMap(rowInfo.row.id);
        break;
      case 'remove-from-map':
        this.props.removeFromMap(rowInfo.row.id);
        break;
      default:
        if (handleOriginal) {
          handleOriginal();
        }
        break;
    }
  }

  isSelected(rowInfo) {
    return (rowInfo && this.props.selectedFile === rowInfo.row.id);
  }

  render() {
    return (
      <Card>
        <CardBody>
          <Row className="mb-4">
            <Col>
              <i className={this.getIconClassName()}></i>
              <span className="font-2xl">{this.props.step.name + ' - Files'}</span>
            </Col>
          </Row>
          <Row>
            <Col>
              <Table
                name="Step Files"
                id="step-files"
                noDataText="No files generated by this step"
                columns={fileColumns}
                data={this.props.files}
                defaultPageSize={10}
                showPageSizeOptions={false}
                manual
                getTdProps={(state, rowInfo, column) => ({
                  onClick: this.handleRowAction.bind(this, rowInfo)
                })}
                showPagination={false}
              />
            </Col>
          </Row>
        </CardBody>
      </Card>
    );
  }
}
