import * as React from 'react';
import PropTypes from 'prop-types';

import {
  Button,
  Card,
  CardBody,
  Col,
  Row,
} from 'reactstrap';

import {
  Table,
} from '../../../helpers';

import {
  ToolIcons,
} from '../../../../model/process-designer';

import {
  DockerLogViewer,
} from './';

import {
  message,
} from '../../../../service';

function sortFiles(files) {
  return [...files].sort((f1, f2) => {
    if (f1.name < f2.name) {
      return -1;
    }
    if (f1.name > f2.name) {
      return 1;
    }
    if (f1.filePath < f2.filePath) {
      return -1;
    }
    if (f1.filePath > f2.filePath) {
      return 1;
    }
    return 0;
  });
}

const tableColumns = [{
  Header: 'id',
  accessor: 'id',
  show: false,
}, {
  Header: 'Actions',
  id: 'actions',
  width: 80,
  Cell: () => {
    return (
      <span>
        <i data-action="file-download" title="Download" className='fa fa-cloud-download slipo-table-row-action p-1'></i>
        <i data-action="file-view" title="View Log" className='fa fa-file-text-o slipo-table-row-action p-1'></i>
      </span>
    );
  },
}, {
  Header: 'Name',
  id: 'name',
  accessor: r => r.filePath.split('/').reverse()[0],
  headerStyle: { 'textAlign': 'left' },
}];

export default class DockerLogDetails extends React.Component {

  constructor(props) {
    super(props);

    this.hideDockerLogDetails = this.hideDockerLogDetails.bind(this);
  }

  static propTypes = {
    hideDockerLogDetails: PropTypes.func.isRequired,
    logs: PropTypes.arrayOf(PropTypes.object).isRequired,
    resetSelectedFile: PropTypes.func.isRequired,
    selectedFile: PropTypes.number,
    selectFile: PropTypes.func.isRequired,
    selectLog: PropTypes.func.isRequired,
    selectedLog: PropTypes.object,
    step: PropTypes.object.isRequired,
  };

  /**
   * Handles row actions
   *
   * @param {any} rowInfo the rowInfo object for the selected row
   * @param {any} e react synthetic event instance
   * @param {any} handleOriginal the table's original event handler
   * @memberof Resources
   */
  handleRowAction(rowInfo, e, handleOriginal) {
    this.props.selectFile(rowInfo.row.id);

    switch (e.target.getAttribute('data-action')) {
      case 'file-download':
        this.downloadLog(rowInfo.row.id, rowInfo.row.name.split('/').reverse()[0]);
        break;

      case 'file-view':
        this.props.selectLog(rowInfo.row.id);
        break;

      default:
        if (handleOriginal) {
          handleOriginal();
        }
        break;
    }
  }

  downloadLog(fileId, fileName) {
    this.props.checkLog(this.props.process.id, this.props.process.version, this.props.execution.id, fileId, fileName)
      .then(() => {
        this.props.downloadLog(this.props.process.id, this.props.process.version, this.props.execution.id, fileId, fileName)
          .catch(err => {
            message.error('Failed to download file', 'fa-cloud-download');
          });
      })
      .catch(err => {
        message.error(err.message, 'fa-cloud-download');
      });
  }

  hideDockerLogDetails() {
    this.props.hideDockerLogDetails();
    this.props.resetSelectedFile();
  }

  isSelected(rowInfo) {
    return (rowInfo && this.props.selectedFile === rowInfo.row.id);
  }

  render() {
    const iconClassName = (ToolIcons[this.props.step.component] || 'fa fa-folder-open') + ' pr-2';
    const data = this.props.selectedLog && this.props.selectedLog.data;
    const file = this.props.selectedFile && this.props.logs.find((f) => f.id === this.props.selectedFile);

    return (
      <div>
        <Card>
          <CardBody>
            <Row className="mb-4">
              <Col>
                <i className={iconClassName}></i>
                <span>{this.props.step.name + ' - Files'}</span>
              </Col>
              <Col>
                <div className="float-right">
                  <Button color="primary" onClick={this.hideDockerLogDetails}><i className="fa fa-undo" /></Button>
                </div>
              </Col>
            </Row>
            <Row>
              <Col>
                <Table
                  name="Step Logs"
                  id="step-logs"
                  noDataText="No log files generated by this step"
                  columns={tableColumns}
                  data={sortFiles(this.props.logs)}
                  defaultPageSize={10}
                  showPageSizeOptions={false}
                  manual
                  minRows={1}
                  getTrProps={(state, rowInfo) => ({
                    className: (this.isSelected(rowInfo) ? 'slipo-react-table-selected' : null),
                  })}
                  getTdProps={(state, rowInfo, column) => ({
                    onClick: this.handleRowAction.bind(this, rowInfo)
                  })}
                  showPagination={false}
                />
              </Col>
            </Row>
          </CardBody>
        </Card>
        {this.props.selectedLog &&
          <Row className="mb-4">
            <Col>
              <DockerLogViewer
                data={data}
                file={file}
              />
            </Col>
          </Row>
        }
      </div>
    );
  }
}
