<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>workbench-webapp</artifactId>
    <packaging>jar</packaging>

    <name>slipo-workbench-webapp</name>

    <parent>
        <groupId>eu.slipo</groupId>
        <artifactId>workbench-project</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <properties>
        <frontend.skip>false</frontend.skip>
        <node.version>v8.12.0</node.version>
        <node.env>production</node.env>
        <apache.csv.version>1.5</apache.csv.version>
    </properties>

    <profiles>
        <profile>
            <id>develop</id>
            <properties>
                <frontend.skip>true</frontend.skip>
            </properties>
        </profile>
    </profiles>

    <repositories>
    </repositories>

    <dependencies>

        <dependency>
            <groupId>eu.slipo</groupId>
            <artifactId>workbench-common</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>eu.slipo</groupId>
            <artifactId>triplegeo-ml-mappings</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        
        <!-- Spring-Boot starter dependencies -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- If packaging to WAR, mark dependency on embedded server as provided -->
        <!--
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

        <!-- JDBC drivers -->

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- log4j2 lifecycle hooks in web context  -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
        </dependency>

        <!-- HTTP client -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <!-- CSV reader -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>${apache.csv.version}</version>
        </dependency>

		<!--  YAML reader/writer -->
		<dependency>
			<groupId>org.yaml</groupId>
			<artifactId>snakeyaml</artifactId>
		</dependency>

    </dependencies>

    <build>
        <plugins>

            <!-- Use Spring-Boot to package as standalone executable JAR -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <classifier>exec</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Copy additional resources under target directory -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <!-- Copy generated (ie compiled) frontend resources to target public directory -->
                    <execution>
                        <id>copy-frontend-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/classes/public</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/frontend</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Configure frontend builds -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.6</version>
                <configuration>
                    <skip>${frontend.skip}</skip> <!-- speedup java-only builds (under spring-boot:run) -->
                </configuration>
                <executions>
                    <execution>
                        <id>node-install</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <!--<skip>false</skip>-->
                            <nodeVersion>${node.version}</nodeVersion>
                        </configuration>
                    </execution>
                    <execution>
                        <id>npm-install</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <!--<skip>false</skip>-->
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>grunt-build</id>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>default</arguments>
                            <environmentVariables>
                                <NODE_ENV>${node.env}</NODE_ENV>
                            </environmentVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Define helper Ant tasks -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- Create a symbolic link to current target JAR -->
                        <id>link-to-target-jar</id>
                        <phase>package</phase>
                        <goals><goal>run</goal></goals>
                        <configuration>
                            <target>
                                <symlink overwrite="yes" link="${project.build.directory}/${project.artifactId}.jar"
                                    resource="${project.artifactId}-${project.version}-exec.jar"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
